= 实验中遇到的困难与解决办法
#align(center)[
  #quote(block: true)[#text(fill: red)[
    描述实验中遇到的困难与解决办法，对实验的意见与建议或收获。
  ]]
]

== 困难与解决办法
在本次实验的过程中，我遇到的主要困难有以下两点：
1. 理解框架：由于本实验的每一部分都在整体框架下运行，因此我需要花费一定的时间理解各模块之间的联系和交互方式。为了解决这个问题，我仔细阅读了实验文档和代码注释，并尝试在本地环境中运行和调试代码，以便更好地理解框架的工作原理。

2. 缺少单元测试：本实验的测试框架较为简单，缺乏详细的单元测试。这导致我在调试和修复代码时需要花费更多的时间。为解决这一问题，我选择进行插桩测试，即在关键位置添加日志输出，以便更好地跟踪程序的执行流程和状态。

3. 缺少自由发挥的空间：本实验的框架较为固定，缺乏自由发挥的空间。为了解决这个问题，我尝试对基础的代码进行修改和优化，以提高代码的效率和可读性。

== 收获
本次实验让我初步体验了一个完整的编译器开发过程，包括词法分析、语法分析、语义分析、中间代码生成和目标代码生成等阶段。通过本次实验，我深入了解了编译器的工作原理和实现方法，提高了我的编程能力和解决问题的能力。

具体来说，我从本次实验中收获了以下内容：
1. 学会利用 Java 语言的一些特性/语法糖编写更加简洁、高效，更具可读性的代码。
2. 学会利用编程语言实现对文本的解析，如正则表达式、词法分析器、语法分析器等。

== 意见与建议
对本实验，我认为在以下的方面可以进行改进：
1. 增加详细的单元测试：为了提高代码的可维护性和可测试性，建议增加详细的单元测试，以便在开发过程中及时发现和修复问题。
2. 改为增量开发的方式：本次实验从第一次实验开始就处于一整个框架之下，这可能不是一个很好的选择。实际上，本实验较高的模块化程度完全支持每次实验的独立开发，仅需保证各模块之间的接口一致及输出正确即可，这有利于提高实验的灵活性。以语法分析为例，可以不限制自底向上或自顶向下的实现方式，而只需保证最终输出有效即可。